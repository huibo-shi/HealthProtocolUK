package HealthProtocolUK.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import org.jetbrains.annotations.Nullable;
import org.apache.log4j.Logger;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class MeasurementOperandAdapter_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Action_v8y5mz_a(), CONCEPTS.MeasurementOperandAdapter$VI));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default substitute menu for " + "MeasurementOperandAdapter", new SNodePointer("r:12896a7d-0e31-4fe4-9e9c-c4260ead99f1(HealthProtocolUK.editor)", "1314835973984448091")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  private class SMP_Action_v8y5mz_a extends SingleItemSubstituteMenuPart {

    @Nullable
    @Override
    protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
      Item item = new Item(_context);
      String description;
      try {
        description = "Substitute item: " + item.getMatchingText("");
      } catch (Throwable t) {
        Logger.getLogger(getClass()).error("Exception while executing getMatchingText() of the item " + item, t);
        return null;
      }

      _context.getEditorMenuTrace().pushTraceInfo();
      try {
        _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:12896a7d-0e31-4fe4-9e9c-c4260ead99f1(HealthProtocolUK.editor)", "1314835973984450473")));
        item.setTraceInfo(_context.getEditorMenuTrace().getTraceInfo());
      } finally {
        _context.getEditorMenuTrace().popTraceInfo();
      }

      return item;
    }
    private class Item extends DefaultSubstituteMenuItem {
      private final SubstituteMenuContext _context;
      private EditorMenuTraceInfo myTraceInfo;
      public Item(SubstituteMenuContext context) {
        super(CONCEPTS.MeasurementOperandAdapter$VI, context);
        _context = context;
      }

      private void setTraceInfo(EditorMenuTraceInfo traceInfo) {
        myTraceInfo = traceInfo;
      }

      @Nullable
      @Override
      public SNode createNode(@NotNull String pattern) {
        SNode operandAdapter = SNodeFactoryOperations.createNewNode(CONCEPTS.MeasurementOperandAdapter$VI, null);
        SNode ancestor = SNodeOperations.getNodeAncestor(_context.getParentNode(), CONCEPTS.ProtocolUK$Wx, false, false);
        List<SNode> roots = SModelOperations.roots(SNodeOperations.getModel(ancestor), CONCEPTS.MeasurementUnitConfig$pH);
        final SNode measurement = SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getParentNode(), CONCEPTS.MeasurementRange$Dq, false, false), LINKS.measurement$O6MX);
        Iterable<SNode> mappings = SLinkOperations.collectMany(roots, LINKS.mappings$Tpk5);
        SEnumerationLiteral someNode = SPropertyOperations.getEnum(Sequence.fromIterable(mappings).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.type$Tnax), PROPS.name$MnvL).equals(SPropertyOperations.getString(measurement, PROPS.name$MnvL));
          }
        }), PROPS.unit$TmGv);
        if (someNode == null) {
          if (SNodeOperations.isInstanceOf(measurement, CONCEPTS.BloodPressureMeasurement$CV)) {
            someNode = SPropertyOperations.getEnum(Sequence.fromIterable(mappings).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, LINKS.type$Tnax), CONCEPTS.BloodPressureMeasurement$CV);
              }
            }), PROPS.unit$TmGv);
          }
        }
        SPropertyOperations.assignEnum(operandAdapter, PROPS.unit$eXXp, (SEnumerationLiteral) someNode);

        return operandAdapter;
      }

      @Override
      public EditorMenuTraceInfo getTraceInfo() {
        return myTraceInfo;
      }
      @Nullable
      @Override
      public String getMatchingText(@NotNull String pattern) {
        return "unit";
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept MeasurementOperandAdapter$VI = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65155bL, "HealthProtocolUK.structure.MeasurementOperandAdapter");
    /*package*/ static final SConcept ProtocolUK$Wx = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb62dL, "HealthProtocolUK.structure.ProtocolUK");
    /*package*/ static final SConcept MeasurementUnitConfig$pH = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e6dL, "HealthProtocolUK.structure.MeasurementUnitConfig");
    /*package*/ static final SConcept MeasurementRange$Dq = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e0L, "HealthProtocolUK.structure.MeasurementRange");
    /*package*/ static final SConcept BloodPressureMeasurement$CV = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59dfL, "HealthProtocolUK.structure.BloodPressureMeasurement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink measurement$O6MX = MetaAdapterFactory.getContainmentLink(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e0L, 0x21db3c3dba9f59e4L, "measurement");
    /*package*/ static final SContainmentLink mappings$Tpk5 = MetaAdapterFactory.getContainmentLink(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e6dL, 0x752b16ad9c803e6eL, "mappings");
    /*package*/ static final SContainmentLink type$Tnax = MetaAdapterFactory.getContainmentLink(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2cL, 0x752b16ad9c803e6bL, "type");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty unit$TmGv = MetaAdapterFactory.getProperty(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2cL, 0x752b16ad9c803e69L, "unit");
    /*package*/ static final SProperty unit$eXXp = MetaAdapterFactory.getProperty(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL, 0x4c693a05b327f94eL, "unit");
  }
}
