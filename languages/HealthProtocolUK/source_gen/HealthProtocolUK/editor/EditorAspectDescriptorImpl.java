package HealthProtocolUK.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AddReminderAction_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new EvaluationEntry_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new FloatConstant_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new InputSpec_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new LessOrEqualUnaryOperator_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new LessUnaryOperator_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Measurement_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MeasurementOperandAdapter_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new MeasurementRange_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new MeasurementRangeOperator_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MeasurementType2UnitMapping_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new MeasurementUnitConfig_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new MoreOrEqualUnaryOperator_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new MoreUnaryOperator_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new OutputResult_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new OutputStatus_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ProtocolUK_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new Measurement_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new MeasurementOperandAdapter_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new Operand_TransformationMenu());
      case 3:
        return Collections.<TransformationMenu>singletonList(new OutputStatus_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "HealthProtocolUK.editor.evalMeasurement_TransformationMenu":
              return Arrays.asList(new TransformationMenu[]{new evalMeasurement_TransformationMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Measurement_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new MeasurementOperandAdapter_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new Operand_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new OutputStatus_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex4.index(cncpt)) {
      case 0:
        if (true) {
          switch (menuId.getFqName()) {
            case "HealthProtocolUK.editor.evalMeasurement_SubstituteMenu":
              return Arrays.asList(new SubstituteMenu[]{new evalMeasurement_SubstituteMenu()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a64fe6cL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e24L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a6521a2L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb633L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219fL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219eL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219dL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65155bL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e0L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x4c693a05b2dc0dcaL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2cL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e6dL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219cL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219bL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e7L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb62dL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65155bL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65155bL), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L), MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L)).seal();
  private static final ConceptSwitchIndex conceptIndex4 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L)).seal();
}
