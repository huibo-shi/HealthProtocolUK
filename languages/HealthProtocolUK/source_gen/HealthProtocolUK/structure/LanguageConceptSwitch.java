package HealthProtocolUK.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AddReminderAction = 0;
  public static final int AskMedicalHelpOutputStatus = 1;
  public static final int BloodPressureMeasurement = 2;
  public static final int CheckRiskFactorsOutputStatus = 3;
  public static final int DiastolicPressureMeasurement = 4;
  public static final int EvaluationEntry = 5;
  public static final int FloatConstant = 6;
  public static final int GlucoseMeasurement = 7;
  public static final int GoodOutputStatus = 8;
  public static final int InputSpec = 9;
  public static final int IntegerConstant = 10;
  public static final int LessOrEqualUnaryOperator = 11;
  public static final int LessUnaryOperator = 12;
  public static final int Measurement = 13;
  public static final int MeasurementBinaryOperator = 14;
  public static final int MeasurementOperand = 15;
  public static final int MeasurementOperandAdapter = 16;
  public static final int MeasurementRange = 17;
  public static final int MeasurementRangeOperator = 18;
  public static final int MeasurementType2UnitMapping = 19;
  public static final int MeasurementUnaryOperator = 20;
  public static final int MeasurementUnitConfig = 21;
  public static final int MoreOrEqualUnaryOperator = 22;
  public static final int MoreUnaryOperator = 23;
  public static final int NormalOutputStatus = 24;
  public static final int Operand = 25;
  public static final int Operator = 26;
  public static final int OutputResult = 27;
  public static final int OutputStatus = 28;
  public static final int ProtocolUK = 29;
  public static final int PulseMeasurement = 30;
  public static final int SystolicPressureMeasurement = 31;
  public static final int TemperatureMeasurement = 32;
  public static final int WeightMeasurement = 33;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x270a52d288a4279L, 0xba126f9a2781f5f4L);
    builder.put(0x654b9e6c3a64fe6cL, AddReminderAction);
    builder.put(0x2d4758520b357a9bL, AskMedicalHelpOutputStatus);
    builder.put(0x21db3c3dba9f59dfL, BloodPressureMeasurement);
    builder.put(0x2d4758520b357a9aL, CheckRiskFactorsOutputStatus);
    builder.put(0x21db3c3dba9f59deL, DiastolicPressureMeasurement);
    builder.put(0x752b16ad9c803e24L, EvaluationEntry);
    builder.put(0x654b9e6c3a6521a2L, FloatConstant);
    builder.put(0x752b16ad9c803e74L, GlucoseMeasurement);
    builder.put(0x2d4758520b357a97L, GoodOutputStatus);
    builder.put(0x752b16ad9c7fb633L, InputSpec);
    builder.put(0x654b9e6c3a65219fL, IntegerConstant);
    builder.put(0x654b9e6c3a65219eL, LessOrEqualUnaryOperator);
    builder.put(0x654b9e6c3a65219dL, LessUnaryOperator);
    builder.put(0x752b16ad9c803e23L, Measurement);
    builder.put(0x654b9e6c3a652195L, MeasurementBinaryOperator);
    builder.put(0x654b9e6c3a65099aL, MeasurementOperand);
    builder.put(0x654b9e6c3a65155bL, MeasurementOperandAdapter);
    builder.put(0x21db3c3dba9f59e0L, MeasurementRange);
    builder.put(0x4c693a05b2dc0dcaL, MeasurementRangeOperator);
    builder.put(0x752b16ad9c803e2cL, MeasurementType2UnitMapping);
    builder.put(0x654b9e6c3a652192L, MeasurementUnaryOperator);
    builder.put(0x752b16ad9c803e6dL, MeasurementUnitConfig);
    builder.put(0x654b9e6c3a65219cL, MoreOrEqualUnaryOperator);
    builder.put(0x654b9e6c3a65219bL, MoreUnaryOperator);
    builder.put(0x2d4758520b357a99L, NormalOutputStatus);
    builder.put(0x654b9e6c3a650999L, Operand);
    builder.put(0x21db3c3dba9f59e1L, Operator);
    builder.put(0x21db3c3dba9f59e7L, OutputResult);
    builder.put(0x2d4758520b357a96L, OutputStatus);
    builder.put(0x752b16ad9c7fb62dL, ProtocolUK);
    builder.put(0x752b16ad9c803e73L, PulseMeasurement);
    builder.put(0x752b16ad9c803e72L, SystolicPressureMeasurement);
    builder.put(0x752b16ad9c803e71L, TemperatureMeasurement);
    builder.put(0x752b16ad9c803e70L, WeightMeasurement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
