package HealthProtocolUK.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import org.jetbrains.annotations.Nullable;
import org.apache.log4j.Logger;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.regex.Pattern;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class Operand_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Action_7jhxaf_a(), CONCEPTS.IntegerConstant$zk));
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new SMP_Action_7jhxaf_b(), CONCEPTS.FloatConstant$$L));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default substitute menu for " + "Operand", new SNodePointer("r:12896a7d-0e31-4fe4-9e9c-c4260ead99f1(HealthProtocolUK.editor)", "1314835973984168259")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  private class SMP_Action_7jhxaf_a extends SingleItemSubstituteMenuPart {

    @Nullable
    @Override
    protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
      Item item = new Item(_context);
      String description;
      try {
        description = "Substitute item: " + item.getMatchingText("");
      } catch (Throwable t) {
        Logger.getLogger(getClass()).error("Exception while executing getMatchingText() of the item " + item, t);
        return null;
      }

      _context.getEditorMenuTrace().pushTraceInfo();
      try {
        _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:12896a7d-0e31-4fe4-9e9c-c4260ead99f1(HealthProtocolUK.editor)", "1314835973984168814")));
        item.setTraceInfo(_context.getEditorMenuTrace().getTraceInfo());
      } finally {
        _context.getEditorMenuTrace().popTraceInfo();
      }

      return item;
    }
    private class Item extends DefaultSubstituteMenuItem {
      private final SubstituteMenuContext _context;
      private EditorMenuTraceInfo myTraceInfo;
      public Item(SubstituteMenuContext context) {
        super(CONCEPTS.IntegerConstant$zk, context);
        _context = context;
      }

      private void setTraceInfo(EditorMenuTraceInfo traceInfo) {
        myTraceInfo = traceInfo;
      }

      @Nullable
      @Override
      public SNode createNode(@NotNull String pattern) {
        SNode intConst = SNodeFactoryOperations.createNewNode(_context.getModel(), CONCEPTS.IntegerConstant$zk, null);
        try {
          SPropertyOperations.set(intConst, PROPS.value$bu7_, Integer.parseInt(pattern));
        } catch (NumberFormatException e) {
          SPropertyOperations.set(intConst, PROPS.value$bu7_, 0);
        }
        return intConst;
      }

      @Override
      public EditorMenuTraceInfo getTraceInfo() {
        return myTraceInfo;
      }
      @Override
      public boolean canExecute(@NotNull String pattern) {
        return canExecute_internal(pattern, false);
      }
      @Override
      public boolean canExecuteStrictly(@NotNull String pattern) {
        return canExecute_internal(pattern, true);
      }
      public boolean canExecute_internal(@NotNull String pattern, boolean strictly) {
        try {
          Integer.parseInt(pattern);
        } catch (NumberFormatException e) {
          return false;
        }

        if (strictly) {
          return REGEXP_7jhxaf_a0a0a2a11c5.matcher(pattern).matches();
        } else {
          return REGEXP_7jhxaf_a0a0a0c0l2f.matcher(pattern).matches();
        }
      }
      @Nullable
      @Override
      public String getMatchingText(@NotNull String pattern) {
        return pattern;
      }
    }
  }
  private class SMP_Action_7jhxaf_b extends SingleItemSubstituteMenuPart {

    @Nullable
    @Override
    protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
      Item item = new Item(_context);
      String description;
      try {
        description = "Substitute item: " + item.getMatchingText("");
      } catch (Throwable t) {
        Logger.getLogger(getClass()).error("Exception while executing getMatchingText() of the item " + item, t);
        return null;
      }

      _context.getEditorMenuTrace().pushTraceInfo();
      try {
        _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:12896a7d-0e31-4fe4-9e9c-c4260ead99f1(HealthProtocolUK.editor)", "1314835973984190913")));
        item.setTraceInfo(_context.getEditorMenuTrace().getTraceInfo());
      } finally {
        _context.getEditorMenuTrace().popTraceInfo();
      }

      return item;
    }
    private class Item extends DefaultSubstituteMenuItem {
      private final SubstituteMenuContext _context;
      private EditorMenuTraceInfo myTraceInfo;
      public Item(SubstituteMenuContext context) {
        super(CONCEPTS.FloatConstant$$L, context);
        _context = context;
      }

      private void setTraceInfo(EditorMenuTraceInfo traceInfo) {
        myTraceInfo = traceInfo;
      }

      @Nullable
      @Override
      public SNode createNode(@NotNull String pattern) {
        SNode floatConst = SNodeFactoryOperations.createNewNode(_context.getModel(), CONCEPTS.FloatConstant$$L, null);
        SPropertyOperations.set(floatConst, PROPS.value$buQ5, pattern);
        return floatConst;
      }

      @Override
      public EditorMenuTraceInfo getTraceInfo() {
        return myTraceInfo;
      }
      @Nullable
      @Override
      public String getMatchingText(@NotNull String pattern) {
        return pattern;
      }
      @Override
      public boolean canExecute(@NotNull String pattern) {
        return canExecute_internal(pattern, false);
      }
      @Override
      public boolean canExecuteStrictly(@NotNull String pattern) {
        return canExecute_internal(pattern, true);
      }
      public boolean canExecute_internal(@NotNull String pattern, boolean strictly) {
        return REGEXP_7jhxaf_a0a0a21c6.matcher(pattern).matches();
      }
    }
  }
  private static final Pattern REGEXP_7jhxaf_a0a0a2a11c5 = Pattern.compile("-?\\d+", 0);
  private static final Pattern REGEXP_7jhxaf_a0a0a0c0l2f = Pattern.compile("-?\\d*", 0);
  private static final Pattern REGEXP_7jhxaf_a0a0a21c6 = Pattern.compile("-?[0-9]+\\.[0-9]*", 0);

  private static final class CONCEPTS {
    /*package*/ static final SConcept IntegerConstant$zk = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219fL, "HealthProtocolUK.structure.IntegerConstant");
    /*package*/ static final SConcept FloatConstant$$L = MetaAdapterFactory.getConcept(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a6521a2L, "HealthProtocolUK.structure.FloatConstant");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$bu7_ = MetaAdapterFactory.getProperty(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219fL, 0x654b9e6c3a6521a0L, "value");
    /*package*/ static final SProperty value$buQ5 = MetaAdapterFactory.getProperty(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a6521a2L, 0x654b9e6c3a6521a3L, "value");
  }
}
