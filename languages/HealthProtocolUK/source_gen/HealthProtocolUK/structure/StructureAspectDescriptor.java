package HealthProtocolUK.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddReminderAction = createDescriptorForAddReminderAction();
  /*package*/ final ConceptDescriptor myConceptAskMedicalHelpOutputStatus = createDescriptorForAskMedicalHelpOutputStatus();
  /*package*/ final ConceptDescriptor myConceptBloodPressureMeasurement = createDescriptorForBloodPressureMeasurement();
  /*package*/ final ConceptDescriptor myConceptCheckRiskFactorsOutputStatus = createDescriptorForCheckRiskFactorsOutputStatus();
  /*package*/ final ConceptDescriptor myConceptDiastolicPressureMeasurement = createDescriptorForDiastolicPressureMeasurement();
  /*package*/ final ConceptDescriptor myConceptEvaluationEntry = createDescriptorForEvaluationEntry();
  /*package*/ final ConceptDescriptor myConceptFloatConstant = createDescriptorForFloatConstant();
  /*package*/ final ConceptDescriptor myConceptGlucoseMeasurement = createDescriptorForGlucoseMeasurement();
  /*package*/ final ConceptDescriptor myConceptGoodOutputStatus = createDescriptorForGoodOutputStatus();
  /*package*/ final ConceptDescriptor myConceptInputSpec = createDescriptorForInputSpec();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = createDescriptorForIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptLessOrEqualUnaryOperator = createDescriptorForLessOrEqualUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptLessUnaryOperator = createDescriptorForLessUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurement = createDescriptorForMeasurement();
  /*package*/ final ConceptDescriptor myConceptMeasurementBinaryOperator = createDescriptorForMeasurementBinaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementOperand = createDescriptorForMeasurementOperand();
  /*package*/ final ConceptDescriptor myConceptMeasurementOperandAdapter = createDescriptorForMeasurementOperandAdapter();
  /*package*/ final ConceptDescriptor myConceptMeasurementRange = createDescriptorForMeasurementRange();
  /*package*/ final ConceptDescriptor myConceptMeasurementRangeOperator = createDescriptorForMeasurementRangeOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementType2UnitMapping = createDescriptorForMeasurementType2UnitMapping();
  /*package*/ final ConceptDescriptor myConceptMeasurementUnaryOperator = createDescriptorForMeasurementUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptMeasurementUnitConfig = createDescriptorForMeasurementUnitConfig();
  /*package*/ final ConceptDescriptor myConceptMoreOrEqualUnaryOperator = createDescriptorForMoreOrEqualUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptMoreUnaryOperator = createDescriptorForMoreUnaryOperator();
  /*package*/ final ConceptDescriptor myConceptNormalOutputStatus = createDescriptorForNormalOutputStatus();
  /*package*/ final ConceptDescriptor myConceptOperand = createDescriptorForOperand();
  /*package*/ final ConceptDescriptor myConceptOperator = createDescriptorForOperator();
  /*package*/ final ConceptDescriptor myConceptOutputResult = createDescriptorForOutputResult();
  /*package*/ final ConceptDescriptor myConceptOutputStatus = createDescriptorForOutputStatus();
  /*package*/ final ConceptDescriptor myConceptProtocolUK = createDescriptorForProtocolUK();
  /*package*/ final ConceptDescriptor myConceptPulseMeasurement = createDescriptorForPulseMeasurement();
  /*package*/ final ConceptDescriptor myConceptSystolicPressureMeasurement = createDescriptorForSystolicPressureMeasurement();
  /*package*/ final ConceptDescriptor myConceptTemperatureMeasurement = createDescriptorForTemperatureMeasurement();
  /*package*/ final ConceptDescriptor myConceptWeightMeasurement = createDescriptorForWeightMeasurement();
  /*package*/ final EnumerationDescriptor myEnumerationMeasurementType = new EnumerationDescriptor_MeasurementType();
  /*package*/ final EnumerationDescriptor myEnumerationMeasurementUnit = new EnumerationDescriptor_MeasurementUnit();
  /*package*/ final EnumerationDescriptor myEnumerationOutputStatusEnum = new EnumerationDescriptor_OutputStatusEnum();
  /*package*/ final EnumerationDescriptor myEnumerationReminderTypeEnum = new EnumerationDescriptor_ReminderTypeEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddReminderAction, myConceptAskMedicalHelpOutputStatus, myConceptBloodPressureMeasurement, myConceptCheckRiskFactorsOutputStatus, myConceptDiastolicPressureMeasurement, myConceptEvaluationEntry, myConceptFloatConstant, myConceptGlucoseMeasurement, myConceptGoodOutputStatus, myConceptInputSpec, myConceptIntegerConstant, myConceptLessOrEqualUnaryOperator, myConceptLessUnaryOperator, myConceptMeasurement, myConceptMeasurementBinaryOperator, myConceptMeasurementOperand, myConceptMeasurementOperandAdapter, myConceptMeasurementRange, myConceptMeasurementRangeOperator, myConceptMeasurementType2UnitMapping, myConceptMeasurementUnaryOperator, myConceptMeasurementUnitConfig, myConceptMoreOrEqualUnaryOperator, myConceptMoreUnaryOperator, myConceptNormalOutputStatus, myConceptOperand, myConceptOperator, myConceptOutputResult, myConceptOutputStatus, myConceptProtocolUK, myConceptPulseMeasurement, myConceptSystolicPressureMeasurement, myConceptTemperatureMeasurement, myConceptWeightMeasurement);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AddReminderAction:
        return myConceptAddReminderAction;
      case LanguageConceptSwitch.AskMedicalHelpOutputStatus:
        return myConceptAskMedicalHelpOutputStatus;
      case LanguageConceptSwitch.BloodPressureMeasurement:
        return myConceptBloodPressureMeasurement;
      case LanguageConceptSwitch.CheckRiskFactorsOutputStatus:
        return myConceptCheckRiskFactorsOutputStatus;
      case LanguageConceptSwitch.DiastolicPressureMeasurement:
        return myConceptDiastolicPressureMeasurement;
      case LanguageConceptSwitch.EvaluationEntry:
        return myConceptEvaluationEntry;
      case LanguageConceptSwitch.FloatConstant:
        return myConceptFloatConstant;
      case LanguageConceptSwitch.GlucoseMeasurement:
        return myConceptGlucoseMeasurement;
      case LanguageConceptSwitch.GoodOutputStatus:
        return myConceptGoodOutputStatus;
      case LanguageConceptSwitch.InputSpec:
        return myConceptInputSpec;
      case LanguageConceptSwitch.IntegerConstant:
        return myConceptIntegerConstant;
      case LanguageConceptSwitch.LessOrEqualUnaryOperator:
        return myConceptLessOrEqualUnaryOperator;
      case LanguageConceptSwitch.LessUnaryOperator:
        return myConceptLessUnaryOperator;
      case LanguageConceptSwitch.Measurement:
        return myConceptMeasurement;
      case LanguageConceptSwitch.MeasurementBinaryOperator:
        return myConceptMeasurementBinaryOperator;
      case LanguageConceptSwitch.MeasurementOperand:
        return myConceptMeasurementOperand;
      case LanguageConceptSwitch.MeasurementOperandAdapter:
        return myConceptMeasurementOperandAdapter;
      case LanguageConceptSwitch.MeasurementRange:
        return myConceptMeasurementRange;
      case LanguageConceptSwitch.MeasurementRangeOperator:
        return myConceptMeasurementRangeOperator;
      case LanguageConceptSwitch.MeasurementType2UnitMapping:
        return myConceptMeasurementType2UnitMapping;
      case LanguageConceptSwitch.MeasurementUnaryOperator:
        return myConceptMeasurementUnaryOperator;
      case LanguageConceptSwitch.MeasurementUnitConfig:
        return myConceptMeasurementUnitConfig;
      case LanguageConceptSwitch.MoreOrEqualUnaryOperator:
        return myConceptMoreOrEqualUnaryOperator;
      case LanguageConceptSwitch.MoreUnaryOperator:
        return myConceptMoreUnaryOperator;
      case LanguageConceptSwitch.NormalOutputStatus:
        return myConceptNormalOutputStatus;
      case LanguageConceptSwitch.Operand:
        return myConceptOperand;
      case LanguageConceptSwitch.Operator:
        return myConceptOperator;
      case LanguageConceptSwitch.OutputResult:
        return myConceptOutputResult;
      case LanguageConceptSwitch.OutputStatus:
        return myConceptOutputStatus;
      case LanguageConceptSwitch.ProtocolUK:
        return myConceptProtocolUK;
      case LanguageConceptSwitch.PulseMeasurement:
        return myConceptPulseMeasurement;
      case LanguageConceptSwitch.SystolicPressureMeasurement:
        return myConceptSystolicPressureMeasurement;
      case LanguageConceptSwitch.TemperatureMeasurement:
        return myConceptTemperatureMeasurement;
      case LanguageConceptSwitch.WeightMeasurement:
        return myConceptWeightMeasurement;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationMeasurementType, myEnumerationMeasurementUnit, myEnumerationOutputStatusEnum, myEnumerationReminderTypeEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAddReminderAction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "AddReminderAction", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a64fe6cL);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757374572");
    b.version(2);
    b.property("type", 0x654b9e6c3a64fe6dL).type(MetaIdFactory.dataTypeId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a64fe6fL)).origin("7299101808757374573").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAskMedicalHelpOutputStatus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "AskMedicalHelpOutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a9bL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.OutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/3262673564451830427");
    b.version(2);
    b.alias("Ask for medical help");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBloodPressureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "BloodPressureMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59dfL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/2439609858972932575");
    b.version(2);
    b.alias("blood pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckRiskFactorsOutputStatus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "CheckRiskFactorsOutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a9aL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.OutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/3262673564451830426");
    b.version(2);
    b.alias("Check risk factors");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDiastolicPressureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "DiastolicPressureMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59deL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/2439609858972932574");
    b.version(2);
    b.alias("diastolic pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEvaluationEntry() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "EvaluationEntry", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e24L);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930212");
    b.version(2);
    b.aggregate("range", 0x654b9e6c3a64fe4aL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e0L).optional(false).ordered(true).multiple(true).origin("7299101808757374538").done();
    b.aggregate("output", 0x21db3c3dba9f59e8L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e7L).optional(false).ordered(true).multiple(false).origin("2439609858972932584").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "FloatConstant", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a6521a2L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Operand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383586");
    b.version(2);
    b.property("value", 0x654b9e6c3a6521a3L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219baL)).origin("7299101808757383587").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGlucoseMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "GlucoseMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e74L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930292");
    b.version(2);
    b.alias("glucose");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGoodOutputStatus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "GoodOutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a97L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.OutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/3262673564451830423");
    b.version(2);
    b.alias("Good");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInputSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "InputSpec", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb633L);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346895411");
    b.version(2);
    b.property("timeRange", 0x752b16ad9c7fb634L).type(PrimitiveTypeId.INTEGER).origin("8442866861346895412").done();
    b.property("size", 0x752b16ad9c7fb636L).type(PrimitiveTypeId.INTEGER).origin("8442866861346895414").done();
    b.aggregate("measure", 0x752b16ad9c803e2aL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L).optional(false).ordered(true).multiple(false).origin("8442866861346930218").done();
    b.alias("input specification");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "IntegerConstant", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219fL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Operand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383583");
    b.version(2);
    b.property("value", 0x654b9e6c3a6521a0L).type(PrimitiveTypeId.INTEGER).origin("7299101808757383584").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessOrEqualUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "LessOrEqualUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219eL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652192L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383582");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "LessUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219dL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652192L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383581");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930211");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementBinaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementBinaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652195L);
    b.class_(false, true, false);
    b.super_("HealthProtocolUK.structure.Operator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e1L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383573");
    b.version(2);
    b.aggregate("operand", 0x654b9e6c3a652196L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL).optional(false).ordered(true).multiple(false).origin("7299101808757383574").done();
    b.aggregate("secondOperand", 0x654b9e6c3a652198L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL).optional(false).ordered(true).multiple(false).origin("7299101808757383576").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementOperand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementOperand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL);
    b.class_(false, true, false);
    b.super_("HealthProtocolUK.structure.Operand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757377434");
    b.version(2);
    b.property("unit", 0x4c693a05b327f94eL).type(MetaIdFactory.dataTypeId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2dL)).origin("5505995815592130894").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementOperandAdapter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementOperandAdapter", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65155bL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementOperand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757380443");
    b.version(2);
    b.aggregate("operand", 0x654b9e6c3a65155cL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L).optional(false).ordered(true).multiple(false).origin("7299101808757380444").done();
    b.alias("unit operand");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementRange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementRange", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e0L);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/2439609858972932576");
    b.version(2);
    b.aggregate("rangeOperator", 0x21db3c3dba9f59e2L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e1L).optional(false).ordered(true).multiple(false).origin("2439609858972932578").done();
    b.aggregate("measurement", 0x21db3c3dba9f59e4L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L).optional(false).ordered(true).multiple(false).origin("2439609858972932580").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementRangeOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementRangeOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x4c693a05b2dc0dcaL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementBinaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652195L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/5505995815587155402");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementType2UnitMapping() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementType2UnitMapping", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2cL);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930220");
    b.version(2);
    b.property("unit", 0x752b16ad9c803e69L).type(MetaIdFactory.dataTypeId(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2dL)).origin("8442866861346930281").done();
    b.aggregate("type", 0x752b16ad9c803e6bL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L).optional(false).ordered(true).multiple(false).origin("8442866861346930283").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652192L);
    b.class_(false, true, false);
    b.super_("HealthProtocolUK.structure.Operator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e1L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383570");
    b.version(2);
    b.aggregate("operand", 0x654b9e6c3a652193L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65099aL).optional(false).ordered(true).multiple(false).origin("7299101808757383571").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMeasurementUnitConfig() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MeasurementUnitConfig", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e6dL);
    b.class_(false, false, true);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930285");
    b.version(2);
    b.aggregate("mappings", 0x752b16ad9c803e6eL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e2cL).optional(false).ordered(true).multiple(true).origin("8442866861346930286").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMoreOrEqualUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MoreOrEqualUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219cL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652192L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383580");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMoreUnaryOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "MoreUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a65219bL);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.MeasurementUnaryOperator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a652192L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757383579");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNormalOutputStatus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "NormalOutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a99L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.OutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/3262673564451830425");
    b.version(2);
    b.alias("Normal");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperand() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "Operand", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a650999L);
    b.class_(false, true, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/7299101808757377433");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "Operator", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e1L);
    b.class_(false, true, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/2439609858972932577");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputResult() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "OutputResult", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x21db3c3dba9f59e7L);
    b.class_(false, false, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/2439609858972932583");
    b.version(2);
    b.property("result", 0x654b9e6c3a64fe57L).type(PrimitiveTypeId.STRING).origin("7299101808757374551").done();
    b.aggregate("action", 0x654b9e6c3a64fe5cL).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x654b9e6c3a64fe6cL).optional(true).ordered(true).multiple(false).origin("7299101808757374556").done();
    b.aggregate("outputstatus", 0x2d4758520b36ff05L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L).optional(false).ordered(true).multiple(false).origin("3262673564451929861").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputStatus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "OutputStatus", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x2d4758520b357a96L);
    b.class_(false, true, false);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/3262673564451830422");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProtocolUK() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "ProtocolUK", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb62dL);
    b.class_(false, false, true);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346895405");
    b.version(2);
    b.property("description", 0x752b16ad9c7fb62eL).type(PrimitiveTypeId.STRING).origin("8442866861346895406").done();
    b.property("reference", 0x752b16ad9c7fb630L).type(PrimitiveTypeId.STRING).origin("8442866861346895408").done();
    b.aggregate("inputSpecs", 0x752b16ad9c803e25L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c7fb633L).optional(false).ordered(true).multiple(true).origin("8442866861346930213").done();
    b.aggregate("eval", 0x752b16ad9c803e27L).target(0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e24L).optional(true).ordered(true).multiple(true).origin("8442866861346930215").done();
    b.alias("protocol uk");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPulseMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "PulseMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e73L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930291");
    b.version(2);
    b.alias("pulse");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSystolicPressureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "SystolicPressureMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e72L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930290");
    b.version(2);
    b.alias("systolic pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTemperatureMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "TemperatureMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e71L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930289");
    b.version(2);
    b.alias("temperature");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWeightMeasurement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("HealthProtocolUK", "WeightMeasurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e70L);
    b.class_(false, false, false);
    b.super_("HealthProtocolUK.structure.Measurement", 0x270a52d288a4279L, 0xba126f9a2781f5f4L, 0x752b16ad9c803e23L);
    b.origin("r:78547a60-8242-4ad0-8b5f-7fb3e8bb1328(HealthProtocolUK.structure)/8442866861346930288");
    b.version(2);
    b.alias("weight");
    return b.create();
  }
}
